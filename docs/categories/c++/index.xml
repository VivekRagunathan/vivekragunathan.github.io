<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on A Developer&#39;s Experience</title>
    <link>/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on A Developer&#39;s Experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Jan 2016 03:07:03 +0000</lastBuildDate><atom:link href="/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Publishing C&#43;&#43;/CLI on LeanPub</title>
      <link>/2016/01/19/publishing-ccli-on-leanpub/</link>
      <pubDate>Tue, 19 Jan 2016 03:07:03 +0000</pubDate>
      
      <guid>/2016/01/19/publishing-ccli-on-leanpub/</guid>
      <description>I came across LeanPub a few months back. I believe it was through hanselman – blog, video or something.</description>
    </item>
    
    <item>
      <title>Publishing C&#43;&#43;/CLI on LeanPub</title>
      <link>/2016/01/19/publishing-ccli-on-leanpub/</link>
      <pubDate>Tue, 19 Jan 2016 03:07:03 +0000</pubDate>
      
      <guid>/2016/01/19/publishing-ccli-on-leanpub/</guid>
      <description>I came across LeanPub a few months back. I believe it was through hanselman – blog, video or something.</description>
    </item>
    
    <item>
      <title>final, const and beyond</title>
      <link>/2015/10/13/final-const-beyond/</link>
      <pubDate>Tue, 13 Oct 2015 08:13:30 +0000</pubDate>
      
      <guid>/2015/10/13/final-const-beyond/</guid>
      <description>&lt;p&gt;What are your thoughts on the following piece of code?&lt;/p&gt;
&lt;p&gt;[code lang=java]&lt;/p&gt;
&lt;p&gt;public String someGibberishMethod() {&lt;/p&gt;
&lt;p&gt;int length = someMethodReturningLength();&lt;/p&gt;
&lt;p&gt;int sum = 0;&lt;/p&gt;
&lt;p&gt;for (int index = 0; index &amp;lt; length; ++index) {&lt;/p&gt;
&lt;p&gt;// some code that updates the sum variable&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;SomeClass someClass = new SomeClass(sum);&lt;/p&gt;
&lt;p&gt;int sumValueInsideSomeClass = someClass.getSumValue();&lt;/p&gt;
&lt;p&gt;// use someText, maybe log or something&lt;/p&gt;
&lt;p&gt;String someText = someClass.doSomeOperation(/*some parameters*/);&lt;/p&gt;
&lt;p&gt;// use someText, maybe log or something&lt;/p&gt;
&lt;p&gt;return someText;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Unfair World of Tuples, Anons., var and auto</title>
      <link>/2015/08/24/tuples-anons/</link>
      <pubDate>Mon, 24 Aug 2015 01:10:27 +0000</pubDate>
      
      <guid>/2015/08/24/tuples-anons/</guid>
      <description>&lt;p&gt;It all began when I wanted to return more than one value from one of the methods. Although my attempts ended futile, it was fun exploring and musing how things could have been.&lt;/p&gt;
&lt;p&gt;There are at least a couple of options to return multiple values from a method:-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;return an instance of a class that holds the values&lt;/li&gt;
&lt;li&gt;return a tuple&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Crazy Braces – [](){}();</title>
      <link>/2011/03/27/crazybraces/</link>
      <pubDate>Sat, 26 Mar 2011 18:38:23 +0000</pubDate>
      
      <guid>/2011/03/27/crazybraces/</guid>
      <description>What does this cryptic bracket sequence mean? What programming language is it?</description>
    </item>
    
    <item>
      <title>Quiz – Where am I ?</title>
      <link>/2011/02/19/whereami/</link>
      <pubDate>Sat, 19 Feb 2011 12:05:38 +0000</pubDate>
      
      <guid>/2011/02/19/whereami/</guid>
      <description>The question is, in C++, how do detect if an object is allocated on the stack or heap.</description>
    </item>
    
    <item>
      <title>Typesafe Logger</title>
      <link>/pages/typesafe-logger/</link>
      <pubDate>Fri, 08 Oct 2010 18:34:09 +0000</pubDate>
      
      <guid>/pages/typesafe-logger/</guid>
      <description>Article co-authored with Sanjeev, and published on CodeProject
 PROBLEM Every application logs a whole bunch of diagnostic messages, primarily for (production) debugging, to the console or the standard error device or to files.</description>
    </item>
    
    <item>
      <title>Thinking Currying !!!</title>
      <link>/2010/10/03/thinking-currying/</link>
      <pubDate>Sun, 03 Oct 2010 12:08:00 +0000</pubDate>
      
      <guid>/2010/10/03/thinking-currying/</guid>
      <description>Currying is a mathematical concept based on lambda calculus. It is a technique of operating on a function (taking multiple arguments) by splitting and capable of chaining into a series of single argument functions.</description>
    </item>
    
    <item>
      <title>Quiz – (Journey through templates, SFINAE and specialization) !!!</title>
      <link>/2010/04/10/sfinae/</link>
      <pubDate>Sat, 10 Apr 2010 07:39:00 +0000</pubDate>
      
      <guid>/2010/04/10/sfinae/</guid>
      <description>template&amp;lt;typename A, typename B&amp;gt; class TClass { public: TClass() { } // Overload #1 public: std::string SomeMethod(A a, B b) { std::ostringstream ostr; ostr &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &#34;</description>
    </item>
    
    <item>
      <title>Type Safe Logger</title>
      <link>/2009/04/25/type-safe-logger/</link>
      <pubDate>Sat, 25 Apr 2009 15:02:00 +0000</pubDate>
      
      <guid>/2009/04/25/type-safe-logger/</guid>
      <description>Article co-authored with Sanjeev, and published on CodeProject
 PROBLEM Every application logs a whole bunch of diagnostic messages, primarily for (production) debugging, to the console or the standard error device or to files.</description>
    </item>
    
    <item>
      <title>Simple Array Class For C&#43;&#43;</title>
      <link>/2009/04/10/simple-array-class-for-c/</link>
      <pubDate>Fri, 10 Apr 2009 16:48:00 +0000</pubDate>
      
      <guid>/2009/04/10/simple-array-class-for-c/</guid>
      <description>This is a simple array like class for C++, which can be used as a safe wrapper for accessing a block of memory pointed by a bare pointer.</description>
    </item>
    
    <item>
      <title>CComPtr Misconception !!!</title>
      <link>/2009/04/08/ccomptr-misconception/</link>
      <pubDate>Wed, 08 Apr 2009 00:15:00 +0000</pubDate>
      
      <guid>/2009/04/08/ccomptr-misconception/</guid>
      <description>This is about a killer bug identified by our chief software engineer in our software.</description>
    </item>
    
    <item>
      <title>Extension Methods – A Polished C&#43;&#43; Feature !!!</title>
      <link>/2008/04/09/extension-methods-a-polished-c-feature/</link>
      <pubDate>Wed, 09 Apr 2008 06:31:39 +0000</pubDate>
      
      <guid>/2008/04/09/extension-methods-a-polished-c-feature/</guid>
      <description>Extension Methods is an excellent feature in C# 3.</description>
    </item>
    
  </channel>
</rss>
