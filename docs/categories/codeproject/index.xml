<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeProject on A Developer&#39;s Experience</title>
    <link>https://okforanything.github.io/categories/codeproject/</link>
    <description>Recent content in CodeProject on A Developer&#39;s Experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 04 Oct 2014 19:43:27 +0000</lastBuildDate><atom:link href="https://okforanything.github.io/categories/codeproject/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Simple Tree List View !!!</title>
      <link>https://okforanything.github.io/2014/10/05/simple-tlv/</link>
      <pubDate>Sat, 04 Oct 2014 19:43:27 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2014/10/05/simple-tlv/</guid>
      <description>Digging up stash is one of the best pass times. You know you never know what you will find.</description>
    </item>
    
    <item>
      <title>Invoking methods with Out and Ref (Part 2) !!!</title>
      <link>https://okforanything.github.io/2010/10/28/outref2/</link>
      <pubDate>Thu, 28 Oct 2010 17:22:39 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2010/10/28/outref2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Thinking Currying !!!</title>
      <link>https://okforanything.github.io/2010/10/03/thinking-currying/</link>
      <pubDate>Sun, 03 Oct 2010 12:08:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2010/10/03/thinking-currying/</guid>
      <description>Currying is a mathematical concept based on lambda calculus. It is a technique of operating on a function (taking multiple arguments) by splitting and capable of chaining into a series of single argument functions.</description>
    </item>
    
    <item>
      <title>Quiz – (Journey through templates, SFINAE and specialization) !!!</title>
      <link>https://okforanything.github.io/2010/04/10/sfinae/</link>
      <pubDate>Sat, 10 Apr 2010 07:39:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2010/04/10/sfinae/</guid>
      <description>Part 1: Non-member Functions Part 2 – Member Functions </description>
    </item>
    
    <item>
      <title>Missing MI !!!</title>
      <link>https://okforanything.github.io/2010/03/05/missing-mi/</link>
      <pubDate>Fri, 05 Mar 2010 17:10:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2010/03/05/missing-mi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>sizeof vs Marshal.SizeOf !!!</title>
      <link>https://okforanything.github.io/2009/12/30/sizeof-vs-marshal-sizeof/</link>
      <pubDate>Tue, 29 Dec 2009 22:25:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/12/30/sizeof-vs-marshal-sizeof/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Curious Case Of Anonymous Delegates !!!</title>
      <link>https://okforanything.github.io/2009/09/02/anondelegates/</link>
      <pubDate>Wed, 02 Sep 2009 18:29:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/09/02/anondelegates/</guid>
      <description>Senthilhas left us thrilled in his new post, and also inspired me to write about the topic.</description>
    </item>
    
    <item>
      <title>finally and Return Values !!!</title>
      <link>https://okforanything.github.io/2009/07/02/finally-and-return-values/</link>
      <pubDate>Wed, 01 Jul 2009 21:07:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/07/02/finally-and-return-values/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Type Safe Logger</title>
      <link>https://okforanything.github.io/2009/04/25/type-safe-logger/</link>
      <pubDate>Sat, 25 Apr 2009 15:02:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/04/25/type-safe-logger/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Simple Array Class For C&#43;&#43;</title>
      <link>https://okforanything.github.io/2009/04/10/simple-array-class-for-c/</link>
      <pubDate>Fri, 10 Apr 2009 16:48:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/04/10/simple-array-class-for-c/</guid>
      <description>Disclaimer: It is not aimed to replace the STL containers.</description>
    </item>
    
    <item>
      <title>CComPtr Misconception !!!</title>
      <link>https://okforanything.github.io/2009/04/08/ccomptr-misconception/</link>
      <pubDate>Wed, 08 Apr 2009 00:15:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/04/08/ccomptr-misconception/</guid>
      <description>CComPtr is a template class in ATL designed to wrap the discrete functionality of COM object management – AddRefand Release.</description>
    </item>
    
    <item>
      <title>OrderedThreadPool – Task Execution In Queued Order !!!</title>
      <link>https://okforanything.github.io/2009/03/18/orderedthreadpool-task-execution-in-queued-order/</link>
      <pubDate>Wed, 18 Mar 2009 03:35:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/03/18/orderedthreadpool-task-execution-in-queued-order/</guid>
      <description>Enough talking…….eat code.</description>
    </item>
    
    <item>
      <title>Settling Casting Restrictions !!!</title>
      <link>https://okforanything.github.io/2009/02/06/settling-casting-restrictions/</link>
      <pubDate>Thu, 05 Feb 2009 20:31:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/02/06/settling-casting-restrictions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The WD Anti-Propaganda Campaign !!!</title>
      <link>https://okforanything.github.io/2009/01/25/the-wd-anti-propaganda-campaign/</link>
      <pubDate>Sun, 25 Jan 2009 22:35:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/01/25/the-wd-anti-propaganda-campaign/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Casting Restrictions ???</title>
      <link>https://okforanything.github.io/2008/11/22/casting-restrictions/</link>
      <pubDate>Sat, 22 Nov 2008 11:43:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2008/11/22/casting-restrictions/</guid>
      <description>We all know that the runtime can detect the actual type of a System.</description>
    </item>
    
    <item>
      <title>Understanding (ref)erences !!!</title>
      <link>https://okforanything.github.io/2008/09/26/understanding-references/</link>
      <pubDate>Fri, 26 Sep 2008 17:03:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2008/09/26/understanding-references/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Surprising Finalize Call !!!</title>
      <link>https://okforanything.github.io/2007/02/22/the-surprising-finalize-call/</link>
      <pubDate>Wed, 21 Feb 2007 20:27:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2007/02/22/the-surprising-finalize-call/</guid>
      <description>Guess the output of the following program:-`</description>
    </item>
    
    <item>
      <title>Learning Type Access Modifiers Basics !!!</title>
      <link>https://okforanything.github.io/2006/12/20/learning-type-access-modifiers-basics/</link>
      <pubDate>Wed, 20 Dec 2006 18:01:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/12/20/learning-type-access-modifiers-basics/</guid>
      <description>&amp;lt;pre&amp;gt;namespace DataStructuresAndAlgo&amp;lt;br /&amp;gt;{&amp;lt;br /&amp;gt; private interface IParamCountBasedAlgo&amp;lt;br /&amp;gt; {&amp;lt;br /&amp;gt; void Validate();&amp;lt;br /&amp;gt; void Execute();&amp;lt;br /&amp;gt; }&amp;lt;br /&amp;gt;}&amp;lt;br /&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;p&amp;gt; &amp;lt;/span&amp;gt;And the compiler spat an error &amp;amp;#8220;&amp;lt;span style=&amp;quot;font-family:Courier New,Courier,Monospace;&amp;quot;&amp;gt;Namespace elements cannot be explicitly declared as private, protected, or protected internal&amp;lt;/span&amp;gt;&amp;amp;#8220;.</description>
    </item>
    
    <item>
      <title>First Google Gadget(s) !!!</title>
      <link>https://okforanything.github.io/2006/12/20/first-google-gadgets/</link>
      <pubDate>Wed, 20 Dec 2006 17:53:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/12/20/first-google-gadgets/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Follow the trail…….Join the Concurrency Revolution !!!</title>
      <link>https://okforanything.github.io/2006/12/20/follow-the-trail-join-the-concurrency-revolution/</link>
      <pubDate>Wed, 20 Dec 2006 17:50:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/12/20/follow-the-trail-join-the-concurrency-revolution/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The New Looking Post !!!</title>
      <link>https://okforanything.github.io/2006/12/20/the-new-looking-post/</link>
      <pubDate>Wed, 20 Dec 2006 17:44:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/12/20/the-new-looking-post/</guid>
      <description>&amp;lt;p&amp;gt; &amp;lt;span style=&amp;quot;font-family:trebuchet ms;font-size:100%;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; </description>
    </item>
    
    <item>
      <title>where enum does not work !!!</title>
      <link>https://okforanything.github.io/2006/12/20/where-enum-does-not-work/</link>
      <pubDate>Wed, 20 Dec 2006 12:25:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/12/20/where-enum-does-not-work/</guid>
      <description>&amp;lt;blockquote&amp;gt; &amp;lt;p&amp;gt; P.S. Refer section 25.7 through for the specification on Generic Type Constraints.</description>
    </item>
    
    <item>
      <title>Overloading……A Matter Of Taste !!!</title>
      <link>https://okforanything.github.io/2006/12/20/overloading-a-matter-of-taste/</link>
      <pubDate>Wed, 20 Dec 2006 12:21:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/12/20/overloading-a-matter-of-taste/</guid>
      <description>&amp;lt;pre&amp;gt;&amp;lt;br /&amp;gt;namespace Samples.MyConsole&amp;lt;br /&amp;gt;{&amp;lt;br /&amp;gt; class Parent&amp;lt;br /&amp;gt; {&amp;lt;br /&amp;gt; public void Foo()&amp;lt;br /&amp;gt; {&amp;lt;br /&amp;gt; Console.</description>
    </item>
    
    <item>
      <title>Fooled by the Activator !!!</title>
      <link>https://okforanything.github.io/2006/07/07/fooled-by-the-activator/</link>
      <pubDate>Fri, 07 Jul 2006 01:56:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/07/07/fooled-by-the-activator/</guid>
      <description>It was interesting to know that a custom exception, say an exception class derived from System.</description>
    </item>
    
    <item>
      <title>Properties C# 2.0 – Not Elegant Enough !!!</title>
      <link>https://okforanything.github.io/2006/06/03/properties-c-2-0-not-elegant-enough/</link>
      <pubDate>Sat, 03 Jun 2006 06:59:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/06/03/properties-c-2-0-not-elegant-enough/</guid>
      <description>Prior to .NET 2.0, there wasn’t the facility in C# to opt the visibility level for the get and set property or indexers.</description>
    </item>
    
    <item>
      <title>Singularity – Safety &amp; Speed !!!</title>
      <link>https://okforanything.github.io/2006/06/02/singularity-safety-speed/</link>
      <pubDate>Fri, 02 Jun 2006 19:54:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/06/02/singularity-safety-speed/</guid>
      <description>I read about this interesting thing somewhere in MSDN.
There are two types of programming or programming languages.</description>
    </item>
    
    <item>
      <title>out, ref and InvokeMember !!!</title>
      <link>https://okforanything.github.io/2006/05/12/out-ref-and-invokemember/</link>
      <pubDate>Fri, 12 May 2006 02:26:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/05/12/out-ref-and-invokemember/</guid>
      <description>When I was working on the .NET reflection extravaganza thing that I explained in my previous column, i learnt one another interesting thing, that is about the Type.</description>
    </item>
    
    <item>
      <title>.NET Reflection Extravanganza !!!</title>
      <link>https://okforanything.github.io/2006/05/11/net-reflection-extravanganza/</link>
      <pubDate>Thu, 11 May 2006 22:40:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/05/11/net-reflection-extravanganza/</guid>
      <description>I was involved in this module for the past few weeks and successfully completed it in a very innovative way.</description>
    </item>
    
  </channel>
</rss>
