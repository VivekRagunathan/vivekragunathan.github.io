<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on A Developer&#39;s Experience</title>
    <link>https://okforanything.github.io/categories/c#/</link>
    <description>Recent content in C# on A Developer&#39;s Experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 Dec 2016 08:21:43 +0000</lastBuildDate><atom:link href="https://okforanything.github.io/categories/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Problem Reduction</title>
      <link>https://okforanything.github.io/2016/12/10/problem-reduction/</link>
      <pubDate>Sat, 10 Dec 2016 08:21:43 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2016/12/10/problem-reduction/</guid>
      <description>&lt;p&gt;&lt;em&gt;Problem Reduction&lt;/em&gt; is what I call when a given problem can be expressed in terms of or solved using a solution to an alternate problem.&lt;/p&gt;
&lt;p&gt;Take for instance, the word distance problem: &lt;em&gt;Find the shortest distance between two words in a given set of words&lt;/em&gt;. Following is an unanimous solution, I suppose:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JINQ</title>
      <link>https://okforanything.github.io/2016/04/02/jinq/</link>
      <pubDate>Fri, 01 Apr 2016 22:50:19 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2016/04/02/jinq/</guid>
      <description>&lt;p&gt;In his &lt;a href=&#34;https://youtu.be/nesCaocNjtQ?t=1359&#34;&gt;talk&lt;/a&gt; at the CppCon 2014, Bjarne Stroustrup explained, politely and brilliantly, how to write succint expressive yet intent-ful code. The task is especially hard when there are parties interested in &lt;a href=&#34;https://youtu.be/nesCaocNjtQ?t=4653&#34;&gt;trolling&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; rather than contributing. Like Stroustrup explains back, it is difficult to find the real meaning out of a large block of (legacy) code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Partial Classes – Java ???</title>
      <link>https://okforanything.github.io/2016/02/16/partial-classes-java/</link>
      <pubDate>Tue, 16 Feb 2016 04:27:37 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2016/02/16/partial-classes-java/</guid>
      <description>&lt;p&gt;I am really sorry if I tricked you into believing that Java is offering partial class feature. Unfortunately, Java doesn’t. Maybe never will. But I am going to talk about a workaround also presenting the thought process. Hence the length of the post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>.NET for the next generation</title>
      <link>https://okforanything.github.io/2015/12/03/net-oss/</link>
      <pubDate>Thu, 03 Dec 2015 09:36:26 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2015/12/03/net-oss/</guid>
      <description>&lt;p&gt;It was about a decade ago when &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ezd0y49a.aspx&#34;&gt;Visual Studio .NET 2002&lt;/a&gt; was launched. Having worked with &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms950418.aspx&#34;&gt;Visual Studio 6&lt;/a&gt; until then, the new interface was refreshing and powerful along with .NET and the suite of languages, tools and technologies. If you were there, you would have felt &lt;em&gt;times were changing&lt;/em&gt;. Beyond the cool and modern interface, Visual Studio &lt;strong&gt;.NET&lt;/strong&gt; 2002 had a lot more to offer compared to Visual Studio 6 — .NET. It was an exciting time for me back then.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Unfair World of Tuples, Anons., var and auto</title>
      <link>https://okforanything.github.io/2015/08/24/tuples-anons/</link>
      <pubDate>Mon, 24 Aug 2015 01:10:27 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2015/08/24/tuples-anons/</guid>
      <description>&lt;p&gt;It all began when I wanted to return more than one value from one of the methods. Although my attempts ended futile, it was fun exploring and musing how things could have been.&lt;/p&gt;
&lt;p&gt;There are at least a couple of options to return multiple values from a method:-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;return an instance of a class that holds the values&lt;/li&gt;
&lt;li&gt;return a tuple&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Mutating Strings</title>
      <link>https://okforanything.github.io/2015/07/07/mutating-strings/</link>
      <pubDate>Tue, 07 Jul 2015 06:52:45 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2015/07/07/mutating-strings/</guid>
      <description>&lt;p&gt;Today, we question our beliefs! Is string really immutable?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;  
&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Prints &amp;#34;Hello World!&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;fixed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;*(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Prints what? See for yourself!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The Secret behind Bjarne and Herb’s Papers on Unified Syntax !!!</title>
      <link>https://okforanything.github.io/2014/11/09/the-secret-behind-bjarne-and-herbs-papers-on-unified-syntax/</link>
      <pubDate>Sun, 09 Nov 2014 10:36:44 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2014/11/09/the-secret-behind-bjarne-and-herbs-papers-on-unified-syntax/</guid>
      <description>A long time back, in one of my posts here, I had discussed about Extension Methods … in C++; sorta!</description>
    </item>
    
    <item>
      <title>A Simple Tree List View !!!</title>
      <link>https://okforanything.github.io/2014/10/05/simple-tlv/</link>
      <pubDate>Sat, 04 Oct 2014 19:43:27 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2014/10/05/simple-tlv/</guid>
      <description>Digging up stash is one of the best pass times. You know you never know what you will find.</description>
    </item>
    
    <item>
      <title>Offering __FILE__ and __LINE__ for C# !!!</title>
      <link>https://okforanything.github.io/2012/09/09/caller_info_in_cs/</link>
      <pubDate>Sat, 08 Sep 2012 18:30:40 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2012/09/09/caller_info_in_cs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>OrderedThreadPool – Bug Fix !!!</title>
      <link>https://okforanything.github.io/2012/04/14/otpbugfix/</link>
      <pubDate>Fri, 13 Apr 2012 19:50:01 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2012/04/14/otpbugfix/</guid>
      <description>  </description>
    </item>
    
    <item>
      <title>Unique Id Generation !!!</title>
      <link>https://okforanything.github.io/2012/03/09/uidgen/</link>
      <pubDate>Thu, 08 Mar 2012 18:41:36 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2012/03/09/uidgen/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Android meets .NET !!!</title>
      <link>https://okforanything.github.io/2011/08/21/android-meets-net/</link>
      <pubDate>Sun, 21 Aug 2011 13:07:44 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2011/08/21/android-meets-net/</guid>
      <description>It is always fun to program in C# (besides C++). If so, how would I feel if I was able to program in C# on Android?</description>
    </item>
    
    <item>
      <title>Anonymous Classes vs Delegates !!!</title>
      <link>https://okforanything.github.io/2011/03/08/anonymous-classes-vs-delegates/</link>
      <pubDate>Tue, 08 Mar 2011 17:10:16 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2011/03/08/anonymous-classes-vs-delegates/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Invoking methods with out and ref – Finale !!!</title>
      <link>https://okforanything.github.io/2010/12/21/out-ref-finale/</link>
      <pubDate>Tue, 21 Dec 2010 13:24:39 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2010/12/21/out-ref-finale/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Invoking methods with Out and Ref (Part 2) !!!</title>
      <link>https://okforanything.github.io/2010/10/28/outref2/</link>
      <pubDate>Thu, 28 Oct 2010 17:22:39 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2010/10/28/outref2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Thinking Currying !!!</title>
      <link>https://okforanything.github.io/2010/10/03/thinking-currying/</link>
      <pubDate>Sun, 03 Oct 2010 12:08:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2010/10/03/thinking-currying/</guid>
      <description>Currying is a mathematical concept based on lambda calculus. It is a technique of operating on a function (taking multiple arguments) by splitting and capable of chaining into a series of single argument functions.</description>
    </item>
    
    <item>
      <title>Missing MI !!!</title>
      <link>https://okforanything.github.io/2010/03/05/missing-mi/</link>
      <pubDate>Fri, 05 Mar 2010 17:10:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2010/03/05/missing-mi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>sizeof vs Marshal.SizeOf !!!</title>
      <link>https://okforanything.github.io/2009/12/30/sizeof-vs-marshal-sizeof/</link>
      <pubDate>Tue, 29 Dec 2009 22:25:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/12/30/sizeof-vs-marshal-sizeof/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Curious Case Of Anonymous Delegates !!!</title>
      <link>https://okforanything.github.io/2009/09/02/anondelegates/</link>
      <pubDate>Wed, 02 Sep 2009 18:29:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/09/02/anondelegates/</guid>
      <description>Senthilhas left us thrilled in his new post, and also inspired me to write about the topic.</description>
    </item>
    
    <item>
      <title>finally and Return Values !!!</title>
      <link>https://okforanything.github.io/2009/07/02/finally-and-return-values/</link>
      <pubDate>Wed, 01 Jul 2009 21:07:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/07/02/finally-and-return-values/</guid>
      <description></description>
    </item>
    
    <item>
      <title>OrderedThreadPool – Task Execution In Queued Order !!!</title>
      <link>https://okforanything.github.io/2009/03/18/orderedthreadpool-task-execution-in-queued-order/</link>
      <pubDate>Wed, 18 Mar 2009 03:35:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/03/18/orderedthreadpool-task-execution-in-queued-order/</guid>
      <description>Enough talking…….eat code.</description>
    </item>
    
    <item>
      <title>Settling Casting Restrictions !!!</title>
      <link>https://okforanything.github.io/2009/02/06/settling-casting-restrictions/</link>
      <pubDate>Thu, 05 Feb 2009 20:31:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2009/02/06/settling-casting-restrictions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Casting Restrictions ???</title>
      <link>https://okforanything.github.io/2008/11/22/casting-restrictions/</link>
      <pubDate>Sat, 22 Nov 2008 11:43:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2008/11/22/casting-restrictions/</guid>
      <description>We all know that the runtime can detect the actual type of a System.</description>
    </item>
    
    <item>
      <title>Understanding (ref)erences !!!</title>
      <link>https://okforanything.github.io/2008/09/26/understanding-references/</link>
      <pubDate>Fri, 26 Sep 2008 17:03:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2008/09/26/understanding-references/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Extension Methods – A Polished C&#43;&#43; Feature !!!</title>
      <link>https://okforanything.github.io/2008/04/09/extension-methods-a-polished-c-feature/</link>
      <pubDate>Wed, 09 Apr 2008 06:31:39 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2008/04/09/extension-methods-a-polished-c-feature/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Surprising Finalize Call !!!</title>
      <link>https://okforanything.github.io/2007/02/22/the-surprising-finalize-call/</link>
      <pubDate>Wed, 21 Feb 2007 20:27:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2007/02/22/the-surprising-finalize-call/</guid>
      <description>Guess the output of the following program:-`</description>
    </item>
    
    <item>
      <title>where enum does not work !!!</title>
      <link>https://okforanything.github.io/2006/12/20/where-enum-does-not-work/</link>
      <pubDate>Wed, 20 Dec 2006 12:25:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/12/20/where-enum-does-not-work/</guid>
      <description>&amp;lt;blockquote&amp;gt; &amp;lt;p&amp;gt; P.S. Refer section 25.7 through for the specification on Generic Type Constraints.</description>
    </item>
    
    <item>
      <title>Overloading……A Matter Of Taste !!!</title>
      <link>https://okforanything.github.io/2006/12/20/overloading-a-matter-of-taste/</link>
      <pubDate>Wed, 20 Dec 2006 12:21:00 +0000</pubDate>
      
      <guid>https://okforanything.github.io/2006/12/20/overloading-a-matter-of-taste/</guid>
      <description>&amp;lt;pre&amp;gt;&amp;lt;br /&amp;gt;namespace Samples.MyConsole&amp;lt;br /&amp;gt;{&amp;lt;br /&amp;gt; class Parent&amp;lt;br /&amp;gt; {&amp;lt;br /&amp;gt; public void Foo()&amp;lt;br /&amp;gt; {&amp;lt;br /&amp;gt; Console.</description>
    </item>
    
  </channel>
</rss>
